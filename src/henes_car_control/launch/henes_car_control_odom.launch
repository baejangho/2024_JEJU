<launch>
  <!-- TF 설정: 맵 프레임에서 오도메트리(odom) 프레임으로의 고정 변환을 발행합니다. -->
  <node pkg="tf" type="static_transform_publisher" name="odom_broadcaster" args="0 0 0 0 0 0 map odom 10" />
  
  <!-- TF 설정: base_footprint 프레임에서 base_link 프레임으로의 고정 변환을 발행합니다. -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.02 0 0 0 base_footprint base_link 10" />
  
  <!-- ROS Serial 구동: 로봇과 통신하기 위한 Serial 노드를 설정합니다. "/dev/ttyACM0" 포트와 115200의 바우드레이트를 사용합니다. -->
  <node name="serial_node" pkg="rosserial_python" type="serial_node.py">
    <param name="port" type="string" value="/dev/ttyACM0"/>
    <param name="baud" type="int" value="115200"/>
  </node>
    
  <!-- IMU 구동: IMU 센서를 위한 노드를 포함합니다. handsfree_ros_imu 패키지 내의 handsfree_imu.launch 파일을 참조합니다. -->
  <include file="$(find handsfree_ros_imu)/launch/handsfree_imu.launch" />
  
  <!-- IMU 설정: IMU 센서의 오프셋 각도를 설정합니다. 여기서는 0도로 설정합니다. -->
  <param name="imu_offest_angle" type="double" value="0.0"/>
  
  <!-- henes_car_control_package 구동: Henes 차량 제어를 위한 메인 노드를 실행합니다. 출력은 스크린으로 설정합니다. -->
  <node pkg="henes_car_control" type="henes_car_control_node" name="henes_base_control_node" output="screen"/>
  
  <!-- odom to path: 오도메트리 데이터를 바탕으로 경로(path)를 생성하고 관리하는 노드를 실행합니다. -->
  <node pkg="henes_car_control" type="odom_path_node.py" name="path_node"/>
</launch>
